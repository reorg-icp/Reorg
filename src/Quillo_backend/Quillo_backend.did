type Account = record { owner : principal; tokens : Tokens };
type Application = record {
  x : text;
  teamDescription : text;
  fdv : nat;
  tokenomics : text;
  contactName : text;
  projectName : text;
  otherLinks : text;
  projectDescription : text;
  projectStartDate : text;
  community : text;
  ecosystem : text;
  investmentRounds : text;
  email : text;
  website : text;
  amountToBeRaised : nat;
  pitch : text;
  amountOfTeamMembers : nat32;
  contactTelegramHandle : text;
  existingUsers : text;
};
type Article = record { id : nat64; title : text; content : text };
type BasicDaoStableStorage = record {
  id : nat64;
  token_id : opt principal;
  system_params : SystemParams;
  accounts : vec Account;
  proposals : vec Proposal;
};
type CustomError = variant { custom : text; MissingField : text };
type Nft = record {
  supply_cap : opt nat;
  logo : opt text;
  name : text;
  description : opt text;
  minting_principal : principal;
  symbol : text;
};
type ProjectInfo = record {
  tokenomics : opt Tokenomics;
  project_description : text;
  socials : opt Socials;
  project_name : text;
  project_principal : opt text;
};
type Proposal = record {
  id : nat64;
  votes_no : Tokens;
  voters : vec principal;
  state : ProposalState;
  timestamp : nat64;
  proposer : principal;
  votes_yes : Tokens;
  payload : ProposalPayload;
};
type ProposalPayload = record {
  method : text;
  main_param : blob;
  extra_info : blob;
};
type ProposalState = variant {
  Failed : text;
  Open;
  Executing;
  Rejected;
  Succeeded;
  Accepted;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : Application; Err : text };
type Result_3 = variant { Ok : Article; Err : text };
type Result_4 = variant { Ok : BasicDaoStableStorage; Err : text };
type Result_5 = variant { Ok : principal; Err : text };
type Result_6 = variant { Ok : BasicDaoStableStorage; Err : CustomError };
type Socials = record { website : opt text; github : opt text };
type SystemParams = record {
  project_details : opt ProjectInfo;
  transfer_fee : opt Tokens;
  proposal_vote_threshold : opt Tokens;
  proposal_submission_deposit : opt Tokens;
  total_token_supply : opt Tokens;
};
type Tokenomics = record {
  token_image : text;
  token_symbol : text;
  transfer_fee : nat;
  token_name : text;
  total_supply : nat;
};
type Tokens = record { e8s : nat64 };
type UpdateSystemParamsPayload = record {
  project_details : opt ProjectInfo;
  transfer_fee : opt Tokens;
  token_canister : opt principal;
  proposal_vote_threshold : opt Tokens;
  proposal_submission_deposit : opt Tokens;
  total_token_supply : opt Tokens;
};
service : {
  apply : (Application) -> (text);
  approve_transfer : () -> (Result);
  delete_all_articles : () -> (Result_1);
  delete_all_daos : () -> (Result_1);
  get_applications : () -> (vec record { nat64; Application }) query;
  get_articles : () -> (vec record { nat64; Article }) query;
  get_icp_balance : (text) -> (Tokens);
  get_projects : () -> (vec record { nat64; BasicDaoStableStorage }) query;
  get_single_application : (nat64) -> (Result_2) query;
  get_single_article : (nat64) -> (Result_3) query;
  get_single_project : (nat64) -> (Result_4) query;
  launch_nft : (Nft) -> (Result_5);
  launch_token : (nat64) -> (Result_5);
  publish_article : (text, text) -> (Result_1);
  register_dao : (UpdateSystemParamsPayload) -> (Result_6);
}
